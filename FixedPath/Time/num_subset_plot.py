#
# i n d e p e n d _ g r a p h . p y
#

# This script will read a log file generated by *independ_time* and graph the numer of subsets,
# the setup time, and the solver time.

# system packages
import argparse
from math import exp, log
import matplotlib.pyplot as plot
from scipy import stats

# open source packages
from engineering_notation import EngNumber as EngNum

# local packages
from LocUtil import Grid1, Select, UnZip
from LocMath import Interp1

######################################
def PlotSubSetSize(data, colorL, metricStr):
    # parse args
    nHop, nSubSet = data

    # plot dots
    plot.semilogy(nHop,nSubSet, 'o', color=colorL[0], markersize=4, zorder=0)

    # fit to data
    logNSubSet = [log(n) for n in nSubSet]
    slope,intercept,_,_,_ = stats.linregress(nHop, logNSubSet)

    text = f'{metricStr} ({exp(intercept):.3} * {exp(slope):.3} ^ N)'

    # plot fit
    xL = Grid1(0,40, 30)
    yL = [exp(slope*x + intercept) for x in xL]

    plot.plot(xL,yL, linewidth=1, color=colorL[0], zorder=1, label=text)

    # set axis
    tickVal = [1, 10, 100, 1e3, 10e3, 100e3, 1e6, 10e6]
    ticklabel = ['1', '10', '100', '1K', '10K', '100K', '1M', '10M']
    plot.yticks(ticks=tickVal, labels=ticklabel)


def GetData(fileName):
    # read data
    with open(fileName, "r") as file:
        lineL = file.readlines()
    info = [eval(line) for line in lineL]

    netInfo,setUpInfo = UnZip(info)
    nHop,nSubSet,setUpTime = UnZip(setUpInfo)

    return (nHop, nSubSet)

###########################################################
if __name__ == "__main__":
    # constants
    fileTemplate = "Independ/prune_%s_500_2.log"
    metric = ['sp','xr','xa']
    rhoStr = '2'

    # load data
    dataSp = GetData(fileTemplate%metric[0])
    dataXr = GetData(fileTemplate%metric[1])
    # dataXa = GetData(fileTemplate%metric[2])

    # do graphs
    fig, ax = plot.subplots(figsize=(9, 6.5))

    PlotSubSetSize(dataSp, ((0, 0, 0.6), (0.6, 0.6, 1)), 'Shortest Path')
    PlotSubSetSize(dataXr, ((0, 0.6, 0), (0.6, 1, 0.6)), 'Exclusion Radius')

    # annotate
    plot.xlabel("Num. of Hops")
    plot.ylabel("Num. Independent Subsets")
    plot.title(f'Effectiveness of Cutting (rho = {rhoStr})')

    plot.legend(loc='upper left')

    # save figure
    plot.savefig('Independ/prune_500_2')
    plot.show()
    plot.close()


