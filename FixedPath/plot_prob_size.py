#
# p l o t _ p r o b _ s i z e . p y
#

# This script will read a log file generated by *independ_time* and graph the numer of subsets,
# the setup time, and the solver time.

# system packages
import argparse
from math import exp, log
import matplotlib.pyplot as plot
from scipy import stats

# local packages
from LocUtil import Grid1, UnZip
from Cost import MetricArg

###############################################################
def ParseArgs():
    parser = argparse.ArgumentParser(
        prog="plot_prob_size",
        description='This script will plot the archived problem size after applying cuts'
    )

    parser.add_argument('folder', type=str)
    parser.add_argument('-metricL', type=str, default="('sp','xr','xa')")

    parser.add_argument('-n', type=int, default=500)
    parser.add_argument('-rhoStr', type=str, default='2')

    # parse args
    args = parser.parse_args()

    # deal with metricL
    metSym = eval(args.metricL)

    if type(metSym) == str:
        metricL = [MetricArg(metSym)]
    else:
        metricL = [MetricArg(sym) for sym in metSym]

    # return results
    return [args.folder, metricL, args.n, args.rhoStr]


######################################
def PlotSubSetSize(data, colorL, metricStr):
    # parse args
    nHop, nSubSet = data

    # plot dots
    plot.semilogy(nHop,nSubSet, 'o', color=colorL[0], markersize=4, zorder=0)

    # fit to data
    logNSubSet = [log(n) for n in nSubSet]
    slope,intercept,_,_,_ = stats.linregress(nHop, logNSubSet)

    text = f'{metricStr} ({exp(intercept):.3} * {exp(slope):.3} ^ N)'

    # plot fit
    xL = Grid1(0,40, 30)
    yL = [exp(slope*x + intercept) for x in xL]

    plot.plot(xL,yL, linewidth=1, color=colorL[0], zorder=1, label=text)

def GetData(fileName):
    # read data
    with open(fileName, "r") as file:
        lineL = file.readlines()
    info = [eval(line) for line in lineL]

    netInfo,setUpInfo,resultInfo = UnZip(info)
    nHop,flow,dist = UnZip(setUpInfo)
    probSize,maxClique,time = UnZip(resultInfo)

    return (nHop, probSize)

###########################################################
if __name__ == "__main__":
    # constants
    fileTemplate = "%s_%d_%s"

    color = {
        'sp': ((0, 0, 0.6), (0.6, 0.6, 1)),
        'xr': ((0, 0.6, 0), (0.6, 1, 0.6)),
        'xa': ((0.6, 0, 0), (1, 0.6, 0.6))
    }

    # parse args
    folder, metricL, n, rhoStr = ParseArgs()
    numMet = len(metricL)

    # load data
    data = []
    for metric in metricL:
        fileName = f'{folder}/{fileTemplate%(metric[0], n, rhoStr)}.log'
        data.append(GetData(fileName))

    # do graphs
    fig, ax = plot.subplots(figsize=(9, 6.5))

    for i in range(numMet):
        sym, name = metricL[i]
        PlotSubSetSize(data[i], color[sym], name)

    # Do power set case
    xL = Grid1(0,40, 30)
    yL = [2 ** x for x in xL]
    plot.semilogy(xL,yL, 'k:', linewidth=2, label='Full Power Set')

    # set axis
    tickVal = [1, 1e3, 1e6, 1e9, 1e12]
    tickLabel = ['1', '1K', '1M', '1G', '1T']
    plot.yticks(ticks=tickVal, labels=tickLabel)

    # annotate
    plot.xlabel("Num. of Hops")
    plot.ylabel("Num. Independent Subsets")
    plot.title(f'Effectiveness of Cutting (rho = {rhoStr})')

    plot.legend(loc='upper left')

    # save figure
    plotFileName = "%s/%d_%s.png"%(folder, n, rhoStr)
    plot.savefig(plotFileName)
    plot.show()
    plot.close()
